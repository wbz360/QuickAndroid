package com.appdsn.qa.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;

 /**
 * Created by baozhong 2016/02/01
 *
 */
public class ResourceUtils {

	private ResourceUtils() {
		throw new AssertionError();
	}

	/**
	 * get an asset using ACCESS_STREAMING mode. This provides access to files
	 * that have been bundled with an application as assets -- that is, files
	 * placed in to the "assets" directory.
	 * 
	 * @param context
	 * @param fileName
	 *            The name of the asset to open. This name can be hierarchical.
	 * @return
	 */
	public static String getStrFromAssets(Context context, String fileName) {
		if (context == null || StringUtils.isEmpty(fileName)) {
			return null;
		}

		StringBuilder s = new StringBuilder("");
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * get content from a raw resource. This can only be used with resources
	 * whose value is the name of an asset files -- that is, it can be used to
	 * open drawable, sound, and raw resources; it will fail on string and color
	 * resources.
	 * 
	 * @param context
	 * @param resId
	 *            The resource identifier to open, as generated by the appt
	 *            tool.
	 * @return
	 */
	public static String getStrFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		StringBuilder s = new StringBuilder();
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.openRawResource(resId));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * same to {@link ResourceUtils#geFileFromAssets(Context, String)}, but
	 * return type is List<String>
	 * 
	 * @param context
	 * @param fileName
	 * @return
	 */
	public static List<String> getListFromAssets(Context context,
			String fileName) {
		if (context == null || StringUtils.isEmpty(fileName)) {
			return null;
		}

		List<String> fileContent = new ArrayList<String>();
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				fileContent.add(line);
			}
			br.close();
			return fileContent;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * same to {@link ResourceUtils#geFileFromRaw(Context, int)}, but return
	 * type is List<String>
	 * 
	 * @param context
	 * @param resId
	 * @return
	 */
	public static List<String> getListFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		List<String> fileContent = new ArrayList<String>();
		BufferedReader reader = null;
		try {
			InputStreamReader in = new InputStreamReader(context.getResources()
					.openRawResource(resId));
			reader = new BufferedReader(in);
			String line = null;
			while ((line = reader.readLine()) != null) {
				fileContent.add(line);
			}
			reader.close();
			return fileContent;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Create and/or open a database that will be used for reading and writing.
	 * 
	 * @return
	 * @throws RuntimeException
	 *             if cannot copy database from assets
	 * @throws SQLiteException
	 *             if the database cannot be opened
	 */
	public synchronized SQLiteDatabase getWritableDatabase(Context context,
			String databaseName) {
		File dbFile = context.getDatabasePath(databaseName);
		if (dbFile != null && !dbFile.exists()) {
			try {
				InputStream stream = context.getAssets().open(databaseName);
				FileUtils.saveStreamToFile(stream, dbFile);
				stream.close();
			} catch (IOException e) {
				throw new RuntimeException("Error creating source database", e);
			}
		}

		return SQLiteDatabase.openDatabase(dbFile.getPath(), null,
				SQLiteDatabase.OPEN_READWRITE);
	}

	/**
	 * Create and/or open a database that will be used for reading only.
	 * 
	 * @return
	 * @throws RuntimeException
	 *             if cannot copy database from assets
	 * @throws SQLiteException
	 *             if the database cannot be opened
	 */
	public synchronized SQLiteDatabase getReadableDatabase(Context context,
			String databaseName) {
		File dbFile = context.getDatabasePath(databaseName);
		if (dbFile != null && !dbFile.exists()) {
			try {
				InputStream stream = context.getAssets().open(databaseName);
				FileUtils.saveStreamToFile(stream, dbFile);
				stream.close();
			} catch (IOException e) {
				throw new RuntimeException("Error creating source database", e);
			}
		}

		return SQLiteDatabase.openDatabase(dbFile.getPath(), null,
				SQLiteDatabase.OPEN_READONLY);
	}
}
